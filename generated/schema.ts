// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class JobInfoEventEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JobInfoEventEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JobInfoEventEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JobInfoEventEntity", id.toString(), this);
  }

  static load(id: string): JobInfoEventEntity | null {
    return store.get("JobInfoEventEntity", id) as JobInfoEventEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get executionInterval(): BigInt | null {
    let value = this.get("executionInterval");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executionInterval(value: BigInt | null) {
    if (value === null) {
      this.unset("executionInterval");
    } else {
      this.set("executionInterval", Value.fromBigInt(value as BigInt));
    }
  }

  get strictExecution(): boolean {
    let value = this.get("strictExecution");
    return value.toBoolean();
  }

  set strictExecution(value: boolean) {
    this.set("strictExecution", Value.fromBoolean(value));
  }

  get jobInfoData(): Bytes | null {
    let value = this.get("jobInfoData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set jobInfoData(value: Bytes | null) {
    if (value === null) {
      this.unset("jobInfoData");
    } else {
      this.set("jobInfoData", Value.fromBytes(value as Bytes));
    }
  }
}

export class JobParamsEventEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save JobParamsEventEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JobParamsEventEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JobParamsEventEntity", id.toString(), this);
  }

  static load(id: string): JobParamsEventEntity | null {
    return store.get("JobParamsEventEntity", id) as JobParamsEventEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initiatorAddress(): Bytes | null {
    let value = this.get("initiatorAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initiatorAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("initiatorAddress");
    } else {
      this.set("initiatorAddress", Value.fromBytes(value as Bytes));
    }
  }

  get executionContract(): Bytes | null {
    let value = this.get("executionContract");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executionContract(value: Bytes | null) {
    if (value === null) {
      this.unset("executionContract");
    } else {
      this.set("executionContract", Value.fromBytes(value as Bytes));
    }
  }

  get functionSignature(): Bytes | null {
    let value = this.get("functionSignature");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set functionSignature(value: Bytes | null) {
    if (value === null) {
      this.unset("functionSignature");
    } else {
      this.set("functionSignature", Value.fromBytes(value as Bytes));
    }
  }

  get tokensInvolved(): string | null {
    let value = this.get("tokensInvolved");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokensInvolved(value: string | null) {
    if (value === null) {
      this.unset("tokensInvolved");
    } else {
      this.set("tokensInvolved", Value.fromString(value as string));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(value as Bytes));
    }
  }
}

export class JobExecutionEventEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save JobExecutionEventEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JobExecutionEventEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JobExecutionEventEntity", id.toString(), this);
  }

  static load(id: string): JobExecutionEventEntity | null {
    return store.get(
      "JobExecutionEventEntity",
      id
    ) as JobExecutionEventEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isExpired(): boolean {
    let value = this.get("isExpired");
    return value.toBoolean();
  }

  set isExpired(value: boolean) {
    this.set("isExpired", Value.fromBoolean(value));
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(value as Bytes));
    }
  }

  get jobExecutionStatus(): Array<string> | null {
    let value = this.get("jobExecutionStatus");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set jobExecutionStatus(value: Array<string> | null) {
    if (value === null) {
      this.unset("jobExecutionStatus");
    } else {
      this.set(
        "jobExecutionStatus",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}

export class JobExecutionStatusEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save JobExecutionStatusEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JobExecutionStatusEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JobExecutionStatusEntity", id.toString(), this);
  }

  static load(id: string): JobExecutionStatusEntity | null {
    return store.get(
      "JobExecutionStatusEntity",
      id
    ) as JobExecutionStatusEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get success(): boolean {
    let value = this.get("success");
    return value.toBoolean();
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get nextExecution(): BigInt | null {
    let value = this.get("nextExecution");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextExecution(value: BigInt | null) {
    if (value === null) {
      this.unset("nextExecution");
    } else {
      this.set("nextExecution", Value.fromBigInt(value as BigInt));
    }
  }
}
